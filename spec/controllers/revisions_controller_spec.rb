require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RevisionsController do

  # This should return the minimal set of attributes required to create a valid
  # Revision. As you add validations to Revision, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :content => 'test content',
      :author_id => 1,
      :page_id => 1
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RevisionsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before :each do
    @revision = FactoryGirl.create(:revision, :page => @page = FactoryGirl.create(:page))
  end

  describe "GET index" do
    it 'should assign correct page as @page' do
      get :index, :page_id => @page.id
      assigns(:page).should eq @page
    end

    it "assigns page revisions as @revisions" do
      FactoryGirl.create(:revision)
      get :index, :page_id => @page.to_param
      assigns(:revisions).should eq([@revision])
    end
  end

  describe "GET show" do
    it 'should assign correct page as @page' do
      get :index, :page_id => @page.id
      assigns(:page).should eq @page
    end

    it "assigns the requested revision as @revision" do
      get :show, :page_id => @page, :id => @revision.to_param
      assigns(:revision).should eq(@revision)
    end
  end

  describe "DELETE destroy" do
    login_admin
    it "destroys the requested revision" do
      expect {
        delete :destroy, :id => @revision
      }.to change(Revision, :count).by(-1)
    end

    it "redirects to the revision's page" do
      delete :destroy, :id => @revision
      response.should redirect_to(@revision.page)
    end
  end

end
