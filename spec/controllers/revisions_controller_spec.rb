require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RevisionsController do

  # This should return the minimal set of attributes required to create a valid
  # Revision. As you add validations to Revision, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :content => 'test content',
      :author_id => 1,
      :page_id => 1
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RevisionsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before :each do
    @revision = FactoryGirl.create(:revision, :page => @page = FactoryGirl.create(:page))
  end

  describe "GET index" do
    it "assigns all revisions as @revisions" do
      get :index, :page_id => @revision.page.to_param
      assigns(:revisions).should eq([@revision])
    end
  end

  describe "GET show" do
    it "assigns the requested revision as @revision" do
      get :show, :page_id => @page, :id => @revision.to_param
      assigns(:revision).should eq(@revision)
    end
  end

  describe "GET new" do
    login_admin
    it "assigns a new revision as @revision" do
      get :new, :page_id => @page
      assigns(:revision).should be_a_new(Revision)
    end
  end

  describe "GET edit" do
    login_admin
    it "assigns the requested revision as @revision" do
      get :edit, :page_id => @page.id, :id => @revision.to_param
      assigns(:revision).should eq(@revision)
    end
  end

  describe "POST create" do
    login_admin
    describe "with valid params" do
      it "creates a new Revision" do
        expect {
          post :create, :page_id => @page, :revision => valid_attributes.merge(:page_id => @page.id)
        }.to change(Revision, :count).by(1)
      end

      it "assigns a newly created revision as @revision" do
        post :create, :page_id => @page, :revision => valid_attributes.merge(:page_id => @page.id)
        assigns(:revision).should be_a(Revision)
        assigns(:revision).should be_persisted
      end

      it "redirects to the created revision" do
        post :create, :page_id => @page, :revision => valid_attributes.merge(:page_id => @page.id)
        response.should redirect_to(Revision.first)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved revision as @revision" do
        # Trigger the behavior that occurs when invalid params are submitted
        Revision.any_instance.stub(:save).and_return(false)
        post :create, :page_id => @page, :revision => {}
        assigns(:revision).should be_a_new(Revision)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Revision.any_instance.stub(:save).and_return(false)
        post :create, :page_id => @page, :revision => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    login_admin
    describe "with valid params" do
      it "updates the requested revision" do
        Revision.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :page_id => @page, :id => @revision.to_param, :revision => {'these' => 'params'}
      end

      it "assigns the requested revision as @revision" do
        put :update, :page_id => @page, :id => @revision.to_param, :revision => valid_attributes.merge(:page_id => nil)
        assigns(:revision).should eq(@revision)
      end

      it "redirects to the revision's page" do
        put :update, :page_id => @page, :id => @revision.to_param, :revision => valid_attributes.merge(:page_id => @page.id)
        response.should redirect_to(@page)
      end
    end

    describe "with invalid params" do
      it "assigns the revision as @revision" do
        # Trigger the behavior that occurs when invalid params are submitted
        Revision.any_instance.stub(:save).and_return(false)
        put :update, :page_id => @page, :id => @revision.to_param, :revision => {}
        assigns(:revision).should eq(@revision)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Revision.any_instance.stub(:save).and_return(false)
        put :update, :page_id => @page, :id => @revision.to_param, :revision => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    login_admin
    it "destroys the requested revision" do
      expect {
        delete :destroy, :id => @revision
      }.to change(Revision, :count).by(-1)
    end

    it "redirects to the revision's page" do
      delete :destroy, :id => @revision
      response.should redirect_to(@revision.page)
    end
  end

end
