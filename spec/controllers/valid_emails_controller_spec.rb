require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ValidEmailsController do

  # This should return the minimal set of attributes required to create a valid
  # ValidEmail. As you add validations to ValidEmail, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :email => 'user@example.com'
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ValidEmailsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    login_admin
    it "assigns all valid_emails as @valid_emails" do
      valid_email = ValidEmail.create! valid_attributes
      get :index
      assigns(:valid_emails).should eq([valid_email])
    end
  end

  describe "GET new" do
    login_admin
    it "assigns a new valid_email as @valid_email" do
      get :new, {}
      assigns(:valid_email).should be_a_new(ValidEmail)
    end
  end

  describe "GET edit" do
    login_admin
    it "assigns the requested valid_email as @valid_email" do
      valid_email = ValidEmail.create! valid_attributes
      get :edit, {:id => valid_email.to_param}
      assigns(:valid_email).should eq(valid_email)
    end
  end

  describe "POST create" do
    login_admin
    describe "with 1 email and valid params" do
      it "creates one new ValidEmail" do
        expect {
          post :create, {:valid_email => valid_attributes}
        }.to change(ValidEmail, :count).by(1)
      end

      it "creates multiple emails if multiple emails are submitted" do
        expect {
          post :create, :valid_email => valid_attributes.merge(:email => "#{FactoryGirl.generate(:email)},#{FactoryGirl.generate(:email)}")
        }.to change(ValidEmail, :count).by(2)
      end

      it 'ignores invalid email addresses' do
        expect {
          post :create, :valid_email => valid_attributes.merge(:email => "#{FactoryGirl.generate(:email)},#{FactoryGirl.generate(:email)},JA3cK@TE-est99.UNIT.co.uk,woohoo.us,wo@user.us,test3'at.com")
        }.to change(ValidEmail, :count).by(4)
      end

      it "redirects to valid_emails#index" do
        post :create, {:valid_email => valid_attributes}
        response.should redirect_to(valid_emails_path)
      end
    end

    describe "without valid email addresses params" do
      it "redirects to valid_emails#index" do
        post :create, :valid_email => {}
        response.should redirect_to(new_valid_email_path(:valid_email => {}))
      end
    end
  end

  describe "PUT update" do
    login_admin
    describe "with valid params" do
      it "updates the requested valid_email" do
        valid_email = ValidEmail.create! valid_attributes
        # Assuming there are no other valid_emails in the database, this
        # specifies that the ValidEmail created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        ValidEmail.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => valid_email.to_param, :valid_email => {'these' => 'params'}}
      end

      it "assigns the requested valid_email as @valid_email" do
        valid_email = ValidEmail.create! valid_attributes
        put :update, {:id => valid_email.to_param, :valid_email => valid_attributes}
        assigns(:valid_email).should eq(valid_email)
      end

      it "redirects to valid_emails#index" do
        valid_email = ValidEmail.create! valid_attributes
        put :update, {:id => valid_email.to_param, :valid_email => valid_attributes}
        response.should redirect_to(valid_emails_path)
      end
    end

    describe "with invalid params" do
      it "assigns the valid_email as @valid_email" do
        valid_email = ValidEmail.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        ValidEmail.any_instance.stub(:save).and_return(false)
        put :update, {:id => valid_email.to_param, :valid_email => {}}
        assigns(:valid_email).should eq(valid_email)
      end

      it "re-renders the 'edit' template" do
        valid_email = ValidEmail.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        ValidEmail.any_instance.stub(:save).and_return(false)
        put :update, {:id => valid_email.to_param, :valid_email => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    login_admin
    it "destroys the requested valid_email" do
      valid_email = ValidEmail.create! valid_attributes
      expect {
        delete :destroy, {:id => valid_email.to_param}
      }.to change(ValidEmail, :count).by(-1)
    end

    it "redirects to the valid_emails list" do
      valid_email = ValidEmail.create! valid_attributes
      delete :destroy, {:id => valid_email.to_param}
      response.should redirect_to(valid_emails_url)
    end
  end

end
